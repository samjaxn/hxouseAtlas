{"version":3,"sources":["components/Boxes.js","content/andras.png","content/hongShing.png","content/shoeLaundry.png","components/Graph.js","components/NodeObject.js","components/JackyObject.js","components/TextObject.js","components/ShapeObject.js","components/ImageObject.js","components/Main.js","App.js","javascript/utils.js","reportWebVitals.js","index.js"],"names":["THREE","Array","fill","GetImageUrl","url","andras","hongShing","shoeLaundry","NodeObject","value","scene","data","mouse","pos","scaled","onClick","getPosRef","getScaleRef","props","testing","object","useRef","position","scale","useThree","size","viewport","aspect","width","height","useSpring","config","mass","tension","friction","precision","spring","color","useEffect","useFrame","current","Math","abs","x","lerp","y","z","group","ref","dispose","e","JackyObject","useLoader","GLTFLoader","nodes","materials","animations","useState","hovered","setHover","name","onPointerOver","onPointerOut","CINEMA_4D_Editor","material","geometry","Extrude_1","Rounding_1","Rounding_2","Extrude","Cap_1","Cap_2","TextObject","children","vAlign","hAlign","font","useMemo","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","mesh","useUpdate","self","computeBoundingBox","boundingBox","getSize","configs","args","meshStandardMaterial","attach","ShapeObject","content","ImageObject","load","texture","hoverValue","planeBufferGeometry","map","Main","positions","Map","scaleVals","activeNode","setActiveNode","g","require","createGraph","addNode","link","scaledCenter","addLink","clickedNode","node","getNode","center","forEachNode","id","get","linkedNodes","forEachLinkedNode","linkedNode","push","linkedNodesPos","urlLink","window","open","angleIncrement","length","angle","forEach","index","calcX","calcY","calcZ","toRadians","sin","cos","PI","posRef","set","scaleVal","fallback","key","returnObjects","Camera","setDefaultCamera","lookAt","App","posX","updateX","posY","updateY","mousePos","onMouseMove","useCallback","clientX","innerWidth","clientY","innerHeight","getMousePos","resize","polyfill","ResizeObserver","gl","antialias","alpha","onCreated","setClearColor","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50b9675d.chunk.js","sourcesContent":["import React, { useRef, useMemo, useState, useEffect } from 'react'\r\nimport * as THREE from 'three';\r\nimport { extend, useThree, useFrame } from 'react-three-fiber';\r\nimport { useSpring, animated } from 'react-spring/three';\r\n\r\nconst tempObject = new THREE.Object3D();\r\nconst tempColor = new THREE.Color();\r\nconst colors = new Array(1000).fill('grey');\r\n\r\nconst Boxes = ({mouse}) => {\r\n    const { size, viewport, aspect } = useThree();\r\n    const aspectX = size.width/ viewport.width;\r\n    const aspectY = size.height/ viewport.height;\r\n\r\n    const [hovered, set] = useState();\r\n    const colorArray = useMemo(() => Float32Array.from(new Array(1000).fill().flatMap((_, i) => tempColor.set(colors[i]).toArray())), [])\r\n\r\n    const ref = useRef();\r\n    const previous = useRef();\r\n    useEffect(() => void (previous.current = hovered), [hovered]);\r\n\r\n    useFrame(state => {\r\n        const time = state.clock.getElapsedTime();\r\n        //ref.current.rotation.x = Math.sin(time / 4);\r\n        //ref.current.rotation.y = Math.sin(time / 2);\r\n        let i = 0;\r\n        for(let x = 0; x < 10; x++)\r\n            for(let y = 0; y < 10; y++){\r\n                    const id = i++\r\n\r\n                    tempObject.position.set(5 - x, 5 - y, 0);\r\n                    tempObject.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(5 / 4 + time)\r\n                    tempObject.rotation.z = tempObject.rotation.y * 2\r\n                    if (hovered !== previous.current) {\r\n                        tempColor.set(id === hovered ? 'white' : 'grey').toArray(colorArray, id * 3)\r\n                        ref.current.geometry.attributes.color.needsUpdate = true\r\n                    }\r\n                    const scale = id === hovered ? 2 : 1\r\n                    tempObject.scale.set(scale, scale, scale)\r\n                    tempObject.updateMatrix()\r\n                    ref.current.setMatrixAt(id, tempObject.matrix)\r\n                }\r\n\r\n        ref.current.instanceMatrix.needsUpdate = true\r\n    })\r\n\r\n    return (\r\n        <instancedMesh\r\n        ref={ref}\r\n        args={[null, null, 1000]}\r\n        onPointerMove={e => set(e.instanceId)}\r\n        onPointerOut={e => set(undefined)}>\r\n            <boxBufferGeometry\r\n            attach=\"geometry\"\r\n            args={[0.7, 0.7, 0.7]}>\r\n                <instancedBufferAttribute\r\n                attachObject={['attributes', 'color']}\r\n                args={[colorArray, 3]} />\r\n            </boxBufferGeometry>\r\n            <meshPhongMaterial\r\n            attach=\"material\"\r\n            vertexColors={THREE.VertexColors} />\r\n        </instancedMesh>\r\n    )\r\n}\r\n\r\nexport default Boxes","export default __webpack_public_path__ + \"static/media/andras.a8cbecf8.png\";","export default __webpack_public_path__ + \"static/media/hongShing.73251cee.png\";","export default __webpack_public_path__ + \"static/media/shoeLaundry.e81bdafa.png\";","import React from 'react'\r\nimport andras from '../content/andras.png'\r\nimport hongShing from '../content/hongShing.png'\r\nimport shoeLaundry from '../content/shoeLaundry.png'\r\n\r\nconst Graph = ({url}) => {\r\n    return null\r\n}\r\n\r\nconst GetImageUrl = (url) => {\r\n    switch(url){\r\n        case 'andras':\r\n            return andras\r\n        case 'hongShing':\r\n            return hongShing\r\n        case 'shoeLaundry':\r\n            return shoeLaundry\r\n        default:\r\n            return shoeLaundry\r\n    }\r\n}\r\n\r\nexport {Graph, GetImageUrl}","import React, { useEffect, useRef, useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { useSpring, animated } from 'react-spring/three' \r\nimport { useLoader, useFrame, useThree } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport lerp from 'lerp'\r\n\r\nconst NodeObject = ({value, data, mouse, scene, pos=[0,0,0], scaled=[1,1,1], onClick, getPosRef, getScaleRef, testing=false, ...props}) => {\r\n    const object = useRef()\r\n    const position = useRef(pos)\r\n    const scale = useRef(scaled)\r\n\r\n    const { size, viewport, aspect } = useThree()\r\n    const aspectX = size.width/ viewport.width\r\n    const aspectY = size.height/ viewport.height\r\n\r\n    const { color, ...spring } = useSpring({\r\n        //scale: hovered ? [1.2, 1.2, 1.2] : [1, 1, 1],\r\n        //color: hovered ? 'white' : 'black',\r\n        config: { mass: 10, tension: 1000, friction: 300, precision: 0.00001 }\r\n    })\r\n\r\n    useEffect(() => {\r\n        getPosRef(value, position)\r\n        getScaleRef(value, scale)\r\n    }, [])\r\n\r\n    useFrame(() => {\r\n        if(object.current){\r\n            (Math.abs(object.current.position.x - position.current[0]) > 0.01) ? object.current.position.x = lerp(object.current.position.x, position.current[0], 0.1) : object.current.position.x = position.current[0];\r\n            (Math.abs(object.current.position.y - position.current[1]) > 0.01) ? object.current.position.y = lerp(object.current.position.y, position.current[1], 0.1) : object.current.position.y = position.current[1];\r\n            (Math.abs(object.current.position.z - position.current[2]) > 0.01) ? object.current.position.z = lerp(object.current.position.z, position.current[2], 0.1) : object.current.position.z = position.current[2];\r\n\r\n            (Math.abs(object.current.scale.x - scale.current[0]) > 0.01) ? object.current.scale.x = lerp(object.current.scale.x, scale.current[0], 0.1) : object.current.scale.x = scale.current[0];\r\n            (Math.abs(object.current.scale.y - scale.current[1]) > 0.01) ? object.current.scale.y = lerp(object.current.scale.y, scale.current[1], 0.1) : object.current.scale.y = scale.current[1];\r\n            (Math.abs(object.current.scale.z - scale.current[2]) > 0.01) ? object.current.scale.z = lerp(object.current.scale.z, scale.current[2], 0.1) : object.current.scale.z = scale.current[2];\r\n\r\n            if(testing){\r\n                //console.log(object.current.position.y)\r\n            }\r\n            \r\n        }\r\n    })\r\n\r\n    return (\r\n        <animated.group\r\n        ref={object}\r\n        dispose={null}\r\n        {...spring}\r\n        {...props}\r\n        onClick={e => {\r\n            onClick(value)\r\n        }}>\r\n            {scene}\r\n        </animated.group>\r\n    )\r\n}\r\n\r\nexport default NodeObject\r\n","import React, { useState } from 'react'\r\nimport { useLoader } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport { useSpring, animated } from 'react-spring/three' \r\n\r\nconst JackyObject = () => {\r\n    const { nodes, materials, animations } = useLoader(GLTFLoader, '/jacky.glb')\r\n\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    const { color, scale, pos, ...configs} = useSpring({\r\n      color: hovered ? 'white' : 'silver',\r\n      scale: hovered ? [1.1, 1.1, 1.1] : [1, 1, 1]\r\n    })\r\n\r\n    return (\r\n      <animated.scene name=\"Root Scene\" scale={scale}>\r\n        <group name=\"RootNode\"\r\n        onPointerOver={e => setHover(true)}\r\n        onPointerOut={e => setHover(false)}\r\n        >\r\n          <primitive object={nodes.CINEMA_4D_Editor} />\r\n          <group name=\"JACKY\">\r\n            <mesh\r\n              material={materials['Plastic Shiny warped Procedural']}\r\n              geometry={nodes.Extrude_1.geometry}\r\n              name=\"Extrude_1\"\r\n              position={[0, -0.51, -0.05]}>\r\n              <mesh\r\n                material={materials['Plastic Shiny warped Procedural']}\r\n                geometry={nodes.Rounding_1.geometry}\r\n                name=\"Rounding_1\"\r\n              />\r\n              <mesh\r\n                material={materials['Plastic Shiny warped Procedural']}\r\n                geometry={nodes.Rounding_2.geometry}\r\n                name=\"Rounding_2\"\r\n              />\r\n            </mesh>\r\n            <mesh\r\n              material={materials['Plastic Dark  Procedural']}\r\n              geometry={nodes.Extrude.geometry}\r\n              name=\"Extrude\"\r\n              position={[0, -0.51, 0.05]}>\r\n              <mesh material={materials['Plastic Dark  Procedural']} geometry={nodes.Cap_1.geometry} name=\"Cap_1\" />\r\n              <mesh material={materials['Plastic Dark  Procedural']} geometry={nodes.Cap_2.geometry} name=\"Cap_2\" />\r\n            </mesh>\r\n          </group>\r\n        </group>\r\n      </animated.scene>\r\n    )\r\n}\r\n\r\nexport default JackyObject\r\n","import React, { useMemo, useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { useSpring, animated } from 'react-spring/three' \r\nimport { useLoader, useUpdate } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\n\r\nconst TextObject = ({children, vAlign = 'center', hAlign = 'center', size = 1, ...props }) => {\r\n    const font = useLoader(THREE.FontLoader, '/Oswald_Regular.json')\r\n    const config = useMemo(\r\n      () => ({ font, size: 7, height: 3, curveSegments: 32, bevelEnabled: true, bevelThickness: 1, bevelSize: 0.5, bevelOffset: 0, bevelSegments: 5 }),\r\n      [font]\r\n    )\r\n\r\n    const mesh = useUpdate(\r\n      (self) => {\r\n        const size = new THREE.Vector3()\r\n        self.geometry.computeBoundingBox()\r\n        self.geometry.boundingBox.getSize(size)\r\n        self.position.x = hAlign === 'center' ? -size.x / 2 : hAlign === 'right' ? 0 : -size.x\r\n        self.position.y = vAlign === 'center' ? -size.y / 2 : vAlign === 'top' ? 0 : -size.y\r\n      },\r\n      [children]\r\n    )\r\n\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    const { color, scale, pos, ...configs} = useSpring({\r\n      color: hovered ? 'white' : 'silver',\r\n      scale: hovered ? [1.1, 1.1, 1.1] : [1, 1, 1]\r\n    })\r\n\r\n    return (\r\n      <animated.scene name=\"Root Scene\" scale={scale}>\r\n        <group {...props} scale={[0.1 * size, 0.1 * size, 0.1]}\r\n        onPointerOver={e => setHover(true)}\r\n        onPointerOut={e => setHover(false)}\r\n        {...configs}>\r\n          <mesh ref={mesh}>\r\n            <textBufferGeometry args={[children, config]} />\r\n            <animated.meshStandardMaterial\r\n              attach=\"material\"\r\n              color={color}\r\n            />\r\n          </mesh>\r\n          {/* <mesh>\r\n            <boxBufferGeometry attach=\"geometry\" args={[85, 15, 3]} />\r\n            <animated.meshStandardMaterial\r\n              attach=\"material\"\r\n              color={color}\r\n            />\r\n          </mesh> */}\r\n        </group>\r\n      </animated.scene>\r\n    )\r\n}\r\n\r\nexport default TextObject\r\n","import React, { useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { useSpring, animated } from 'react-spring/three' \r\nimport { useLoader } from 'react-three-fiber'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\n\r\nconst ShapeObject = ({content}) => {\r\n\r\n    //const tex = useLoader(THREE.TextureLoader, url)\r\n\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    const { color, scale, pos, ...configs} = useSpring({\r\n      color: hovered ? 'white' : 'silver',\r\n      scale: hovered ? [1.2, 1.2, 1.2] : [1, 1, 1]\r\n    })\r\n\r\n    return (\r\n      <animated.scene name=\"Root Scene\" scale={scale}>\r\n        <group>\r\n          <mesh position={[0, 0, 0]}\r\n          onPointerOver={e => setHover(true)}\r\n          onPointerOut={e => setHover(false)}\r\n          >\r\n            <boxBufferGeometry attach=\"geometry\" args={[5, 3, 0.3]} />\r\n            <meshBasicMaterial\r\n              attach=\"material\"\r\n              color=\"white\"\r\n            />\r\n          </mesh>\r\n        </group>\r\n      </animated.scene>\r\n    )\r\n}\r\n\r\nexport default ShapeObject\r\n","import React, { useMemo, useState } from 'react'\r\nimport * as THREE from 'three'\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\r\nimport { useSpring, animated, config } from 'react-spring/three' \r\nimport { useLoader, useUpdate } from 'react-three-fiber'\r\nimport { HoverImageShader } from '../resources/index'\r\n\r\nconst ImageObject = ({ url, scaled, ...props }) => {\r\n    const [hovered, setHover] = useState(false)\r\n\r\n    const [texture] = useMemo(() => {\r\n        const loader = new THREE.TextureLoader()\r\n        return [loader.load(url)]\r\n    }, [url])\r\n\r\n    const { hoverValue, scale } = useSpring({\r\n        hoverValue: hovered ? 1 : 0,\r\n        scale: hovered ? [1.2, 1.2, 1.2] : [1, 1, 1],\r\n        // config: config.molasses\r\n    })\r\n\r\n    return (\r\n        <animated.scene scale={scale}>\r\n            <animated.mesh\r\n            onPointerOver={e => setHover(true)}\r\n            onPointerOut={e => setHover(false)}\r\n            {...props}\r\n            >\r\n                <animated.planeBufferGeometry attach=\"geometry\" args={[5.3, 3]} />\r\n                {/* <animated.shaderMaterial attach=\"material\" transparent args={[HoverImageShader]} uniforms-texture-value={texture} uniforms-hover-value={hoverValue} /> */}\r\n                <meshStandardMaterial map={texture} attach=\"material\" />\r\n            </animated.mesh>\r\n        </animated.scene>\r\n    )\r\n}\r\n\r\nexport default ImageObject\r\n","import React, { Suspense, useRef, useState } from 'react'\r\nimport { Graph, GetImageUrl } from './Graph'\r\nimport NodeObject from './NodeObject'\r\nimport JackyObject from './JackyObject'\r\nimport TextObject from './TextObject'\r\nimport ShapeObject from './ShapeObject'\r\nimport ImageObject from './ImageObject'\r\n\r\nconst Main = ({mouse}) => {\r\n    let x = mouse.current[0]\r\n\r\n    let positions = useRef(new Map())\r\n    let scaleVals = useRef(new Map())\r\n\r\n    //need this for react to re render the components after a click is made\r\n    let [activeNode, setActiveNode] = useState()\r\n\r\n    var createGraph = require('ngraph.graph');\r\n    var g = createGraph();\r\n\r\n    g.addNode('jacky', { scene: <JackyObject />, pos: [0,0,30]})\r\n    g.addNode('2019', { scene: <TextObject children=\"2019\" />, pos: [0,0,30]})\r\n    g.addNode('2020', { scene: <TextObject children=\"2020\" />, pos: [0,0,30]})\r\n    g.addNode('2021', { scene: <TextObject children=\"2021\" />, pos: [0,0,30]})\r\n    g.addNode('c4d', { scene: <TextObject children=\"3D MOTION DESIGNER\" />, pos: [0,0,30]})\r\n    g.addNode('dev', { scene: <TextObject children=\"SOFTWARE DEVELOPER\" />, pos: [0,0,30]})\r\n    g.addNode('v1', { scene: <ShapeObject />, pos: [0,0,30], link: \"https://www.instagram.com/jackyjacksn/\"})\r\n    g.addNode('v2', { scene: <ShapeObject />, pos: [0,0,30], link: \"https://www.instagram.com/jackyjacksn/\"})\r\n    g.addNode('v3', { scene: <ImageObject url={GetImageUrl('shoeLaundry')} />, pos: [0,0,30], scaledCenter: true, link: \"https://www.instagram.com/jackyjacksn/\"})\r\n    g.addNode('v4', { scene: <ImageObject url={GetImageUrl('hongShing')} />, pos: [0,0,30], scaledCenter: true, link: \"https://www.instagram.com/jackyjacksn/\"})\r\n    g.addNode('v5', { scene: <ImageObject url={GetImageUrl('andras')} />, pos: [0,0,30], scaledCenter: true, link: \"https://www.instagram.com/jackyjacksn/\"})\r\n    g.addNode('v6', { scene: <ImageObject url={'https://images.unsplash.com/photo-1517462964-21fdcec3f25b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80'} scale={[1,1,1]} position={[0,0,0]} />, pos: [0,0,30], link: \"https://www.instagram.com/jackyjacksn/\"})\r\n\r\n    g.addLink('jacky', 'c4d')\r\n    g.addLink('jacky', 'dev')\r\n    g.addLink('c4d', 'v1')\r\n    g.addLink('c4d', 'v2')\r\n    g.addLink('c4d', 'v3')\r\n    g.addLink('c4d', 'v4')\r\n    g.addLink('c4d', 'v5')\r\n    g.addLink('c4d', 'v6')\r\n    g.addLink('2020', 'v1')\r\n    g.addLink('2020', 'v2')\r\n    g.addLink('2020', 'v3')\r\n    g.addLink('2020', 'v4')\r\n    g.addLink('2020', 'v5')\r\n    g.addLink('2020', 'v6')\r\n\r\n    const onClick = (clickedNode) => {\r\n        let node = g.getNode(clickedNode)\r\n\r\n        //if the clicked node is not the current center node\r\n        if(clickedNode != activeNode){\r\n            //if the node can be centerable\r\n            if(node.data.center !== false){\r\n                g.forEachNode((node) => {\r\n                    //set each node to the original position and center the clicked node\r\n                    node.id == clickedNode ? positions.current.get(node.id).current = [0,0,0] : positions.current.get(node.id).current = node.data.pos;\r\n                    (node.id == clickedNode && node.data.scaledCenter) ? scaleVals.current.get(node.id).current = [2,2,2] : scaleVals.current.get(node.id).current = [1,1,1];\r\n                })\r\n                //calculates and moves the nodes to the position around the clicked node (maybe in useframe for the linked nodes to rotate around the clicked node)\r\n                let linkedNodes = []\r\n                g.forEachLinkedNode(clickedNode, (linkedNode) => {\r\n                    linkedNodes.push(linkedNode)\r\n                    //console.log(\"Connected node: \", linkedNode.id, linkedNode.data)\r\n                })\r\n                linkedNodesPos(linkedNodes)\r\n                setActiveNode(clickedNode)\r\n            }\r\n        }\r\n        else{\r\n            let urlLink = node.data.link\r\n\r\n            if(urlLink){\r\n                window.open(urlLink, \"_blank\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const linkedNodesPos = (linkedNodes) => {\r\n        let length = linkedNodes.length\r\n        let angleIncrement = 360/length\r\n        let angle = 0\r\n\r\n        linkedNodes.forEach((node, index) => {\r\n            positions.current.get(node.id).current = [calcX(angle), calcY(angle), calcZ(angle)]\r\n            angle += angleIncrement\r\n        })\r\n    }\r\n\r\n    const calcX = (angle) => {\r\n        angle = toRadians(angle)\r\n        return (10 * Math.sin(angle))\r\n    }\r\n\r\n    const calcY = (angle) => {\r\n        angle = toRadians(angle)\r\n        return (6 * Math.cos(angle))\r\n    }\r\n\r\n    const calcZ = (angle) => {\r\n        angle = toRadians(angle)\r\n        // return (2 * Math.random() - 2)\r\n        return -1\r\n    }\r\n\r\n    const toRadians = (angle) => {\r\n        return angle * (Math.PI / 180);\r\n    }\r\n    \r\n    //adds the posRef to a list with the key of the node it is the posRef for\r\n    const getPosRef = (node, posRef) => {\r\n        positions.current.set(node, posRef)\r\n    }\r\n\r\n    const getScaleRef = (node, scaleVal) => {\r\n        scaleVals.current.set(node, scaleVal)\r\n    }\r\n\r\n    const returnObjects = () => {\r\n        let value = []\r\n        \r\n        //adds all the nodes to the array that gets rendered\r\n        g.forEachNode((node) => {\r\n            if(node.id == 'jacky'){\r\n                value.push( <NodeObject key={node.id} value={node.id} data={node.data} onClick={onClick} getPosRef={getPosRef} getScaleRef={getScaleRef} pos={[0,0,0]} scene={node.data.scene} mouse={mouse} testing={node.data.testing}/> )\r\n            }\r\n            else{\r\n                value.push( <NodeObject key={node.id} value={node.id} data={node.data} onClick={onClick} getPosRef={getPosRef} getScaleRef={getScaleRef} pos={node.data.pos} scene={node.data.scene} mouse={mouse} testing={node.data.testing}/> )\r\n            }\r\n        })\r\n\r\n        return value\r\n    }\r\n\r\n    return (\r\n        <Suspense fallback={null}>\r\n            {/* <NodeObject mouse={mouse} scene={<JackyObject />} position1={[0,5,1]} position2={[0,0,0]} />\r\n            <NodeObject mouse={mouse} scene={<JackyObject />} position1={[0,0,0]} position2={[0,0,15]} /> */}\r\n            {returnObjects()}\r\n            {/* <NodeObject key={'a'} value={'a'} onClick={onClick} getPosRef={getPosRef} pos={[0,0,0]} scene={<TextObject position={[0,0,0]} children=\"SOFTWARE DEVELOPER\" />} mouse={mouse} testing={false}/> */}\r\n            {/* <NodeObject key={'a'} value={'a'} onClick={onClick} getPosRef={getPosRef} pos={[0,0,0]} scene={<JackyObject />} mouse={mouse} testing={false}/> */}\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React, { useRef, useCallback, useState, useEffect, Suspense } from 'react'\r\nimport * as THREE from 'three'\r\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\r\nimport { ResizeObserver } from '@juggle/resize-observer'\r\nimport ModalVideo from 'react-modal-video'\r\n\r\nimport './css/styles.css'\r\n\r\nimport Boxes from './components/Boxes';\r\nimport Jacky from './components/Jacky';\r\nimport Main from './components/Main'\r\n\r\nimport { getMousePos } from \"./javascript/utils\"\r\n\r\nimport lerp from 'lerp';\r\n\r\nconst Camera = (props) => {\r\n  const ref = useRef();\r\n  const { setDefaultCamera } = useThree();\r\n  useEffect(() => {\r\n    setDefaultCamera(ref.current)\r\n  }, []);\r\n  useFrame(() => {\r\n    ref.current.lookAt(new THREE.Vector3(0,0,0))\r\n    //ref.current.updateMatrixWorld()\r\n  });\r\n  return <perspectiveCamera ref={ref} {...props} />\r\n}\r\n\r\nconst App = () => {\r\n  const [isOpen, setOpen] = useState(false)\r\n  const [posX, updateX] = useState(0)\r\n  const [posY, updateY] = useState(0)\r\n  const mousePos = useRef({ x: 0, y: 0 })\r\n  const mouse = useRef([0, 0])\r\n\r\n  const onMouseMove = useCallback((e) => {\r\n    mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2];\r\n    mousePos.current = getMousePos(e);\r\n    updateX(lerp(posX, (posX + ((mouse.current[0] - posX) * 0.05)), 0.1));\r\n    updateY(lerp(posY, (posY + ((- mouse.current[1] - posY) * 0.05)), 0.1));\r\n    //console.log(mouse.current[0]);\r\n  }, [])\r\n\r\n  return (\r\n    <div id=\"root\">\r\n      {/* <div id=\"info\">\r\n      <React.Fragment>\r\n            <ModalVideo channel='youtube' autoplay isOpen={isOpen} videoId=\"L61p2uyiMSo\" onClose={() => setOpen(false)} />\r\n \r\n            <button className=\"btn-primary\" onClick={()=> setOpen(true)}>VIEW DEMO</button>\r\n        </React.Fragment>\r\n      </div> */}\r\n      <Canvas\r\n      resize={{ polyfill: ResizeObserver }}\r\n      onMouseMove={onMouseMove}\r\n      gl={{ antialias: true, alpha: false }}\r\n      //camera={camera}\r\n      onCreated={({ gl }) => gl.setClearColor('black')}>\r\n        <Camera position={[posX,posY,20]}/>\r\n        <rectAreaLight width={20} height={20} color={\"#ffffff\"} intensity={5} position={[0, 5, 20]} lookAt={[0, 0, 0]} />\r\n        {/* <Jacky mouse={mouse}/> */}\r\n        <Main mouse={mouse} />\r\n\r\n      </Canvas>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export function getMousePos(e) {\r\n    return { x: e.clientX, y: e.clientY }\r\n}\r\n\r\nexport function getMouseDegrees(x, y, degreeLimit) {\r\n    let dx = 0,\r\n        dy = 0,\r\n        xdiff,\r\n        xPercentage,\r\n        ydiff,\r\n        yPercentage\r\n\r\n    let w = { x: window.innerWidth, y: window.innerHeight }\r\n\r\n    // Left (Rotates neck left between 0 and -degreeLimit)\r\n    // 1. If cursor is in the left half of screen\r\n    if (x <= w.x / 2) {\r\n        // 2. Get the difference between middle of screen and cursor position\r\n        xdiff = w.x / 2 - x\r\n        // 3. Find the percentage of that difference (percentage toward edge of screen)\r\n        xPercentage = (xdiff / (w.x / 2)) * 100\r\n        // 4. Convert that to a percentage of the maximum rotation we allow for the neck\r\n        dx = ((degreeLimit * xPercentage) / 100) * -1\r\n    }\r\n\r\n    // Right (Rotates neck right between 0 and degreeLimit)\r\n    if (x >= w.x / 2) {\r\n        xdiff = x - w.x / 2\r\n        xPercentage = (xdiff / (w.x / 2)) * 100\r\n        dx = (degreeLimit * xPercentage) / 100\r\n    }\r\n    // Up (Rotates neck up between 0 and -degreeLimit)\r\n    if (y <= w.y / 2) {\r\n        ydiff = w.y / 2 - y\r\n        yPercentage = (ydiff / (w.y / 2)) * 100\r\n        // Note that I cut degreeLimit in half when she looks up\r\n        dy = ((degreeLimit * 0.5 * yPercentage) / 100) * -1\r\n    }\r\n    // Down (Rotates neck down between 0 and degreeLimit)\r\n    if (y >= w.y / 2) {\r\n        ydiff = y - w.y / 2\r\n        yPercentage = (ydiff / (w.y / 2)) * 100\r\n        dy = (degreeLimit * yPercentage) / 100\r\n    }\r\n    return { x: dx, y: dy }\r\n}\r\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}