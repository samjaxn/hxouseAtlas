{"version":3,"sources":["components/Boxes.js","content/jacky.glb","components/NodeObject.js","content/andras.png","content/hongShing.png","content/shoeLaundry.png","components/Graph.js","components/JackyObject.js","components/TextObject.js","components/ShapeObject.js","components/ImageObject.js","components/Main.js","App.js","javascript/utils.js","reportWebVitals.js","index.js"],"names":["THREE","Array","fill","NodeObject","value","scene","data","mouse","pos","scaled","onClick","getPosRef","getScaleRef","props","testing","object","useRef","position","scale","useThree","size","viewport","aspect","width","height","useSpring","config","mass","tension","friction","precision","spring","color","useEffect","useFrame","current","Math","abs","x","lerp","y","z","group","ref","dispose","e","GetImageUrl","url","andras","hongShing","shoeLaundry","JackyObject","useLoader","GLTFLoader","jackyGLB","nodes","materials","animations","useState","hovered","setHover","name","onPointerOver","onPointerOut","CINEMA_4D_Editor","material","geometry","Extrude_1","Rounding_1","Rounding_2","Extrude","Cap_1","Cap_2","TextObject","children","vAlign","hAlign","font","useMemo","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","mesh","useUpdate","self","computeBoundingBox","boundingBox","getSize","configs","args","meshStandardMaterial","attach","ShapeObject","content","ImageObject","load","texture","hoverValue","planeBufferGeometry","map","Main","positions","Map","scaleVals","activeNode","setActiveNode","g","require","createGraph","addNode","link","scaledCenter","addLink","clickedNode","node","getNode","center","forEachNode","id","get","linkedNodes","forEachLinkedNode","linkedNode","push","linkedNodesPos","urlLink","window","open","angleIncrement","length","angle","forEach","index","calcX","calcY","calcZ","toRadians","sin","cos","PI","posRef","set","scaleVal","fallback","returnObjects","Camera","setDefaultCamera","lookAt","App","posX","updateX","posY","updateY","mousePos","onMouseMove","useCallback","clientX","innerWidth","clientY","innerHeight","getMousePos","resize","polyfill","ResizeObserver","gl","antialias","alpha","onCreated","setClearColor","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75d2bb23.chunk.js","sourcesContent":["import React, { useRef, useMemo, useState, useEffect } from 'react'\nimport * as THREE from 'three';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { useSpring, animated } from 'react-spring/three';\n\nconst tempObject = new THREE.Object3D();\nconst tempColor = new THREE.Color();\nconst colors = new Array(1000).fill('grey');\n\nconst Boxes = ({mouse}) => {\n    const { size, viewport, aspect } = useThree();\n    const aspectX = size.width/ viewport.width;\n    const aspectY = size.height/ viewport.height;\n\n    const [hovered, set] = useState();\n    const colorArray = useMemo(() => Float32Array.from(new Array(1000).fill().flatMap((_, i) => tempColor.set(colors[i]).toArray())), [])\n\n    const ref = useRef();\n    const previous = useRef();\n    useEffect(() => void (previous.current = hovered), [hovered]);\n\n    useFrame(state => {\n        const time = state.clock.getElapsedTime();\n        //ref.current.rotation.x = Math.sin(time / 4);\n        //ref.current.rotation.y = Math.sin(time / 2);\n        let i = 0;\n        for(let x = 0; x < 10; x++)\n            for(let y = 0; y < 10; y++){\n                    const id = i++\n\n                    tempObject.position.set(5 - x, 5 - y, 0);\n                    tempObject.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(5 / 4 + time)\n                    tempObject.rotation.z = tempObject.rotation.y * 2\n                    if (hovered !== previous.current) {\n                        tempColor.set(id === hovered ? 'white' : 'grey').toArray(colorArray, id * 3)\n                        ref.current.geometry.attributes.color.needsUpdate = true\n                    }\n                    const scale = id === hovered ? 2 : 1\n                    tempObject.scale.set(scale, scale, scale)\n                    tempObject.updateMatrix()\n                    ref.current.setMatrixAt(id, tempObject.matrix)\n                }\n\n        ref.current.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <instancedMesh\n        ref={ref}\n        args={[null, null, 1000]}\n        onPointerMove={e => set(e.instanceId)}\n        onPointerOut={e => set(undefined)}>\n            <boxBufferGeometry\n            attach=\"geometry\"\n            args={[0.7, 0.7, 0.7]}>\n                <instancedBufferAttribute\n                attachObject={['attributes', 'color']}\n                args={[colorArray, 3]} />\n            </boxBufferGeometry>\n            <meshPhongMaterial\n            attach=\"material\"\n            vertexColors={THREE.VertexColors} />\n        </instancedMesh>\n    )\n}\n\nexport default Boxes","export default __webpack_public_path__ + \"static/media/jacky.db25af7a.glb\";","import React, { useEffect, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { useSpring, animated } from 'react-spring/three' \nimport { useLoader, useFrame, useThree } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport lerp from 'lerp'\n\nconst NodeObject = ({value, data, mouse, scene, pos=[0,0,0], scaled=[1,1,1], onClick, getPosRef, getScaleRef, testing=false, ...props}) => {\n    const object = useRef()\n    const position = useRef(pos)\n    const scale = useRef(scaled)\n\n    const { size, viewport, aspect } = useThree()\n    const aspectX = size.width/ viewport.width\n    const aspectY = size.height/ viewport.height\n\n    const { color, ...spring } = useSpring({\n        //scale: hovered ? [1.2, 1.2, 1.2] : [1, 1, 1],\n        //color: hovered ? 'white' : 'black',\n        config: { mass: 10, tension: 1000, friction: 300, precision: 0.00001 }\n    })\n\n    useEffect(() => {\n        getPosRef(value, position)\n        getScaleRef(value, scale)\n    }, [])\n\n    useFrame(() => {\n        if(object.current){\n            (Math.abs(object.current.position.x - position.current[0]) > 0.01) ? object.current.position.x = lerp(object.current.position.x, position.current[0], 0.1) : object.current.position.x = position.current[0];\n            (Math.abs(object.current.position.y - position.current[1]) > 0.01) ? object.current.position.y = lerp(object.current.position.y, position.current[1], 0.1) : object.current.position.y = position.current[1];\n            (Math.abs(object.current.position.z - position.current[2]) > 0.01) ? object.current.position.z = lerp(object.current.position.z, position.current[2], 0.1) : object.current.position.z = position.current[2];\n\n            (Math.abs(object.current.scale.x - scale.current[0]) > 0.01) ? object.current.scale.x = lerp(object.current.scale.x, scale.current[0], 0.1) : object.current.scale.x = scale.current[0];\n            (Math.abs(object.current.scale.y - scale.current[1]) > 0.01) ? object.current.scale.y = lerp(object.current.scale.y, scale.current[1], 0.1) : object.current.scale.y = scale.current[1];\n            (Math.abs(object.current.scale.z - scale.current[2]) > 0.01) ? object.current.scale.z = lerp(object.current.scale.z, scale.current[2], 0.1) : object.current.scale.z = scale.current[2];\n\n            if(testing){\n                //console.log(object.current.position.y)\n            }\n            \n        }\n    })\n\n    return (\n        <animated.group\n        ref={object}\n        dispose={null}\n        {...spring}\n        {...props}\n        onClick={e => {\n            onClick(value)\n        }}>\n            {scene}\n        </animated.group>\n    )\n}\n\nexport default NodeObject\n","export default __webpack_public_path__ + \"static/media/andras.a8cbecf8.png\";","export default __webpack_public_path__ + \"static/media/hongShing.73251cee.png\";","export default __webpack_public_path__ + \"static/media/shoeLaundry.e81bdafa.png\";","import React from 'react'\nimport andras from '../content/andras.png'\nimport hongShing from '../content/hongShing.png'\nimport shoeLaundry from '../content/shoeLaundry.png'\n\nconst Graph = ({url}) => {\n    return null\n}\n\nconst GetImageUrl = (url) => {\n    switch(url){\n        case 'andras':\n            return andras\n        case 'hongShing':\n            return hongShing\n        case 'shoeLaundry':\n            return shoeLaundry\n        default:\n            return shoeLaundry\n    }\n}\n\nexport {Graph, GetImageUrl}","import React, { useState } from 'react'\nimport { useLoader } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { useSpring, animated } from 'react-spring/three'\nimport jackyGLB from '../content/jacky.glb'\n\nconst JackyObject = () => {\n    const { nodes, materials, animations } = useLoader(GLTFLoader, jackyGLB)\n\n    const [hovered, setHover] = useState(false)\n\n    const { color, scale, pos, ...configs} = useSpring({\n      color: hovered ? 'white' : 'silver',\n      scale: hovered ? [1.1, 1.1, 1.1] : [1, 1, 1]\n    })\n\n    return (\n      <animated.scene name=\"Root Scene\" scale={scale}>\n        <group name=\"RootNode\"\n        onPointerOver={e => setHover(true)}\n        onPointerOut={e => setHover(false)}\n        >\n          <primitive object={nodes.CINEMA_4D_Editor} />\n          <group name=\"JACKY\">\n            <mesh\n              material={materials['Plastic Shiny warped Procedural']}\n              geometry={nodes.Extrude_1.geometry}\n              name=\"Extrude_1\"\n              position={[0, -0.51, -0.05]}>\n              <mesh\n                material={materials['Plastic Shiny warped Procedural']}\n                geometry={nodes.Rounding_1.geometry}\n                name=\"Rounding_1\"\n              />\n              <mesh\n                material={materials['Plastic Shiny warped Procedural']}\n                geometry={nodes.Rounding_2.geometry}\n                name=\"Rounding_2\"\n              />\n            </mesh>\n            <mesh\n              material={materials['Plastic Dark  Procedural']}\n              geometry={nodes.Extrude.geometry}\n              name=\"Extrude\"\n              position={[0, -0.51, 0.05]}>\n              <mesh material={materials['Plastic Dark  Procedural']} geometry={nodes.Cap_1.geometry} name=\"Cap_1\" />\n              <mesh material={materials['Plastic Dark  Procedural']} geometry={nodes.Cap_2.geometry} name=\"Cap_2\" />\n            </mesh>\n          </group>\n        </group>\n      </animated.scene>\n    )\n}\n\nexport default JackyObject\n","import React, { useMemo, useState } from 'react'\nimport * as THREE from 'three'\nimport { useSpring, animated } from 'react-spring/three' \nimport { useLoader, useUpdate } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport fontJSON from '../javascript/fontJSON'\n\nconst TextObject = ({children, vAlign = 'center', hAlign = 'center', size = 1, ...props }) => {\n    const font = useLoader(THREE.FontLoader, '/Oswald_Regular.json')\n    const config = useMemo(\n      () => ({ font, size: 7, height: 3, curveSegments: 32, bevelEnabled: true, bevelThickness: 1, bevelSize: 0.5, bevelOffset: 0, bevelSegments: 5 }),\n      [font]\n    )\n\n    const mesh = useUpdate(\n      (self) => {\n        const size = new THREE.Vector3()\n        self.geometry.computeBoundingBox()\n        self.geometry.boundingBox.getSize(size)\n        self.position.x = hAlign === 'center' ? -size.x / 2 : hAlign === 'right' ? 0 : -size.x\n        self.position.y = vAlign === 'center' ? -size.y / 2 : vAlign === 'top' ? 0 : -size.y\n      },\n      [children]\n    )\n\n    const [hovered, setHover] = useState(false)\n\n    const { color, scale, pos, ...configs} = useSpring({\n      color: hovered ? 'white' : 'silver',\n      scale: hovered ? [1.1, 1.1, 1.1] : [1, 1, 1]\n    })\n\n    return (\n      <animated.scene name=\"Root Scene\" scale={scale}>\n        <group {...props} scale={[0.1 * size, 0.1 * size, 0.1]}\n        onPointerOver={e => setHover(true)}\n        onPointerOut={e => setHover(false)}\n        {...configs}>\n          <mesh ref={mesh}>\n            <textBufferGeometry args={[children, config]} />\n            <animated.meshStandardMaterial\n              attach=\"material\"\n              color={color}\n            />\n          </mesh>\n          {/* <mesh>\n            <boxBufferGeometry attach=\"geometry\" args={[85, 15, 3]} />\n            <animated.meshStandardMaterial\n              attach=\"material\"\n              color={color}\n            />\n          </mesh> */}\n        </group>\n      </animated.scene>\n    )\n}\n\nexport default TextObject\n","import React, { useState } from 'react'\nimport * as THREE from 'three'\nimport { useSpring, animated } from 'react-spring/three' \nimport { useLoader } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nconst ShapeObject = ({content}) => {\n\n    //const tex = useLoader(THREE.TextureLoader, url)\n\n    const [hovered, setHover] = useState(false)\n\n    const { color, scale, pos, ...configs} = useSpring({\n      color: hovered ? 'white' : 'silver',\n      scale: hovered ? [1.2, 1.2, 1.2] : [1, 1, 1]\n    })\n\n    return (\n      <animated.scene name=\"Root Scene\" scale={scale}>\n        <group>\n          <mesh position={[0, 0, 0]}\n          onPointerOver={e => setHover(true)}\n          onPointerOut={e => setHover(false)}\n          >\n            <boxBufferGeometry attach=\"geometry\" args={[5, 3, 0.3]} />\n            <meshBasicMaterial\n              attach=\"material\"\n              color=\"white\"\n            />\n          </mesh>\n        </group>\n      </animated.scene>\n    )\n}\n\nexport default ShapeObject\n","import React, { useMemo, useState } from 'react'\nimport * as THREE from 'three'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport { useSpring, animated, config } from 'react-spring/three' \nimport { useLoader, useUpdate } from 'react-three-fiber'\nimport { HoverImageShader } from '../resources/index'\n\nconst ImageObject = ({ url, scaled, ...props }) => {\n    const [hovered, setHover] = useState(false)\n\n    const [texture] = useMemo(() => {\n        const loader = new THREE.TextureLoader()\n        return [loader.load(url)]\n    }, [url])\n\n    const { hoverValue, scale } = useSpring({\n        hoverValue: hovered ? 1 : 0,\n        scale: hovered ? [1.2, 1.2, 1.2] : [1, 1, 1],\n        // config: config.molasses\n    })\n\n    return (\n        <animated.scene scale={scale}>\n            <animated.mesh\n            onPointerOver={e => setHover(true)}\n            onPointerOut={e => setHover(false)}\n            {...props}\n            >\n                <animated.planeBufferGeometry attach=\"geometry\" args={[5.3, 3]} />\n                {/* <animated.shaderMaterial attach=\"material\" transparent args={[HoverImageShader]} uniforms-texture-value={texture} uniforms-hover-value={hoverValue} /> */}\n                <meshStandardMaterial map={texture} attach=\"material\" />\n            </animated.mesh>\n        </animated.scene>\n    )\n}\n\nexport default ImageObject\n","import React, { Suspense, useRef, useState } from 'react'\nimport { Graph, GetImageUrl } from './Graph'\nimport NodeObject from './NodeObject'\nimport JackyObject from './JackyObject'\nimport TextObject from './TextObject'\nimport ShapeObject from './ShapeObject'\nimport ImageObject from './ImageObject'\n\nconst Main = ({mouse}) => {\n    let x = mouse.current[0]\n\n    let positions = useRef(new Map())\n    let scaleVals = useRef(new Map())\n\n    //need this for react to re render the components after a click is made\n    let [activeNode, setActiveNode] = useState()\n\n    var createGraph = require('ngraph.graph');\n    var g = createGraph();\n\n    g.addNode('jacky', { scene: <JackyObject />, pos: [0,0,30]})\n    g.addNode('2019', { scene: <TextObject children=\"2019\" />, pos: [0,0,30]})\n    g.addNode('2020', { scene: <TextObject children=\"2020\" />, pos: [0,0,30]})\n    g.addNode('2021', { scene: <TextObject children=\"2021\" />, pos: [0,0,30]})\n    g.addNode('c4d', { scene: <TextObject children=\"3D MOTION DESIGNER\" />, pos: [0,0,30]})\n    g.addNode('dev', { scene: <TextObject children=\"SOFTWARE DEVELOPER\" />, pos: [0,0,30]})\n    g.addNode('v1', { scene: <ShapeObject />, pos: [0,0,30], link: \"https://www.instagram.com/jackyjacksn/\"})\n    g.addNode('v2', { scene: <ShapeObject />, pos: [0,0,30], link: \"https://www.instagram.com/jackyjacksn/\"})\n    g.addNode('v3', { scene: <ImageObject url={GetImageUrl('shoeLaundry')} />, pos: [0,0,30], scaledCenter: true, link: \"https://www.instagram.com/jackyjacksn/\"})\n    g.addNode('v4', { scene: <ImageObject url={GetImageUrl('hongShing')} />, pos: [0,0,30], scaledCenter: true, link: \"https://www.instagram.com/jackyjacksn/\"})\n    g.addNode('v5', { scene: <ImageObject url={GetImageUrl('andras')} />, pos: [0,0,30], scaledCenter: true, link: \"https://www.instagram.com/jackyjacksn/\"})\n    g.addNode('v6', { scene: <ImageObject url={'https://images.unsplash.com/photo-1517462964-21fdcec3f25b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80'} scale={[1,1,1]} position={[0,0,0]} />, pos: [0,0,30], link: \"https://www.instagram.com/jackyjacksn/\"})\n\n    g.addLink('jacky', 'c4d')\n    g.addLink('jacky', 'dev')\n    g.addLink('c4d', 'v1')\n    g.addLink('c4d', 'v2')\n    g.addLink('c4d', 'v3')\n    g.addLink('c4d', 'v4')\n    g.addLink('c4d', 'v5')\n    g.addLink('c4d', 'v6')\n    g.addLink('2020', 'v1')\n    g.addLink('2020', 'v2')\n    g.addLink('2020', 'v3')\n    g.addLink('2020', 'v4')\n    g.addLink('2020', 'v5')\n    g.addLink('2020', 'v6')\n\n    const onClick = (clickedNode) => {\n        let node = g.getNode(clickedNode)\n\n        //if the clicked node is not the current center node\n        if(clickedNode != activeNode){\n            //if the node can be centerable\n            if(node.data.center !== false){\n                g.forEachNode((node) => {\n                    //set each node to the original position and center the clicked node\n                    node.id == clickedNode ? positions.current.get(node.id).current = [0,0,0] : positions.current.get(node.id).current = node.data.pos;\n                    (node.id == clickedNode && node.data.scaledCenter) ? scaleVals.current.get(node.id).current = [2,2,2] : scaleVals.current.get(node.id).current = [1,1,1];\n                })\n                //calculates and moves the nodes to the position around the clicked node (maybe in useframe for the linked nodes to rotate around the clicked node)\n                let linkedNodes = []\n                g.forEachLinkedNode(clickedNode, (linkedNode) => {\n                    linkedNodes.push(linkedNode)\n                    //console.log(\"Connected node: \", linkedNode.id, linkedNode.data)\n                })\n                linkedNodesPos(linkedNodes)\n                setActiveNode(clickedNode)\n            }\n        }\n        else{\n            let urlLink = node.data.link\n\n            if(urlLink){\n                window.open(urlLink, \"_blank\")\n            }\n        }\n    }\n\n    const linkedNodesPos = (linkedNodes) => {\n        let length = linkedNodes.length\n        let angleIncrement = 360/length\n        let angle = 0\n\n        linkedNodes.forEach((node, index) => {\n            positions.current.get(node.id).current = [calcX(angle), calcY(angle), calcZ(angle)]\n            angle += angleIncrement\n        })\n    }\n\n    const calcX = (angle) => {\n        angle = toRadians(angle)\n        return (10 * Math.sin(angle))\n    }\n\n    const calcY = (angle) => {\n        angle = toRadians(angle)\n        return (6 * Math.cos(angle))\n    }\n\n    const calcZ = (angle) => {\n        angle = toRadians(angle)\n        // return (2 * Math.random() - 2)\n        return -1\n    }\n\n    const toRadians = (angle) => {\n        return angle * (Math.PI / 180);\n    }\n    \n    //adds the posRef to a list with the key of the node it is the posRef for\n    const getPosRef = (node, posRef) => {\n        positions.current.set(node, posRef)\n    }\n\n    const getScaleRef = (node, scaleVal) => {\n        scaleVals.current.set(node, scaleVal)\n    }\n\n    const returnObjects = () => {\n        let value = []\n        \n        //adds all the nodes to the array that gets rendered\n        g.forEachNode((node) => {\n            if(node.id == 'jacky'){\n                value.push( <NodeObject key={node.id} value={node.id} data={node.data} onClick={onClick} getPosRef={getPosRef} getScaleRef={getScaleRef} pos={[0,0,0]} scene={node.data.scene} mouse={mouse} testing={node.data.testing}/> )\n            }\n            else{\n                value.push( <NodeObject key={node.id} value={node.id} data={node.data} onClick={onClick} getPosRef={getPosRef} getScaleRef={getScaleRef} pos={node.data.pos} scene={node.data.scene} mouse={mouse} testing={node.data.testing}/> )\n            }\n        })\n\n        return value\n    }\n\n    return (\n        <Suspense fallback={null}>\n            {/* <NodeObject mouse={mouse} scene={<JackyObject />} position1={[0,5,1]} position2={[0,0,0]} />\n            <NodeObject mouse={mouse} scene={<JackyObject />} position1={[0,0,0]} position2={[0,0,15]} /> */}\n            {returnObjects()}\n            {/* <NodeObject key={'a'} value={'a'} onClick={onClick} getPosRef={getPosRef} pos={[0,0,0]} scene={<TextObject position={[0,0,0]} children=\"SOFTWARE DEVELOPER\" />} mouse={mouse} testing={false}/> */}\n            {/* <NodeObject key={'a'} value={'a'} onClick={onClick} getPosRef={getPosRef} pos={[0,0,0]} scene={<JackyObject />} mouse={mouse} testing={false}/> */}\n        </Suspense>\n    )\n}\n\nexport default Main\n","import React, { useRef, useCallback, useState, useEffect, Suspense } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\nimport { ResizeObserver } from '@juggle/resize-observer'\n\nimport './css/styles.css'\n\nimport Boxes from './components/Boxes';\nimport Jacky from './components/Jacky';\nimport NodeObject from './components/NodeObject'\nimport Main from './components/Main'\nimport Graph from './components/Graph'\n\nimport { getMousePos } from \"./javascript/utils\"\n\nimport lerp from 'lerp';\n\nconst Camera = (props) => {\n  const ref = useRef();\n  const { setDefaultCamera } = useThree();\n\n  useEffect(() => {\n    setDefaultCamera(ref.current)\n  }, []);\n\n  useFrame(() => {\n    if(ref.current){\n      ref.current.lookAt(new THREE.Vector3(0,0,0))\n    }\n    //ref.current.updateMatrixWorld()\n  });\n  \n  return <perspectiveCamera ref={ref} {...props} />\n}\n\nconst App = () => {\n  const [posX, updateX] = useState(0)\n  const [posY, updateY] = useState(0)\n  const mousePos = useRef({ x: 0, y: 0 })\n  const mouse = useRef([0, 0])\n\n  const onMouseMove = useCallback((e) => {\n    mouse.current = [e.clientX - window.innerWidth / 2, e.clientY - window.innerHeight / 2];\n    mousePos.current = getMousePos(e);\n    updateX(lerp(posX, (posX + ((mouse.current[0] - posX) * 0.05)), 0.1));\n    updateY(lerp(posY, (posY + ((- mouse.current[1] - posY) * 0.05)), 0.1));\n    //console.log(mouse.current[0]);\n  }, [])\n\n  return (\n    <div id=\"root\">\n      {/* <div id=\"info\">Description</div> */}\n      <Canvas\n      resize={{ polyfill: ResizeObserver }}\n      onMouseMove={onMouseMove}\n      gl={{ antialias: true, alpha: false }}\n      //camera={camera}\n      onCreated={({ gl }) => gl.setClearColor('black')}>\n        <Camera position={[posX,posY,20]}/>\n        <rectAreaLight width={20} height={20} color={\"#ffffff\"} intensity={5} position={[0, 5, 20]} lookAt={[0, 0, 0]} />\n        {/* <Jacky mouse={mouse}/> */}\n        <Suspense fallback={null}>\n          <Main mouse={mouse} />\n        </Suspense>\n        {/* <Graph /> */}\n      </Canvas>\n    </div>\n  );\n}\n\nexport default App;\n","export function getMousePos(e) {\n    return { x: e.clientX, y: e.clientY }\n}\n\nexport function getMouseDegrees(x, y, degreeLimit) {\n    let dx = 0,\n        dy = 0,\n        xdiff,\n        xPercentage,\n        ydiff,\n        yPercentage\n\n    let w = { x: window.innerWidth, y: window.innerHeight }\n\n    // Left (Rotates neck left between 0 and -degreeLimit)\n    // 1. If cursor is in the left half of screen\n    if (x <= w.x / 2) {\n        // 2. Get the difference between middle of screen and cursor position\n        xdiff = w.x / 2 - x\n        // 3. Find the percentage of that difference (percentage toward edge of screen)\n        xPercentage = (xdiff / (w.x / 2)) * 100\n        // 4. Convert that to a percentage of the maximum rotation we allow for the neck\n        dx = ((degreeLimit * xPercentage) / 100) * -1\n    }\n\n    // Right (Rotates neck right between 0 and degreeLimit)\n    if (x >= w.x / 2) {\n        xdiff = x - w.x / 2\n        xPercentage = (xdiff / (w.x / 2)) * 100\n        dx = (degreeLimit * xPercentage) / 100\n    }\n    // Up (Rotates neck up between 0 and -degreeLimit)\n    if (y <= w.y / 2) {\n        ydiff = w.y / 2 - y\n        yPercentage = (ydiff / (w.y / 2)) * 100\n        // Note that I cut degreeLimit in half when she looks up\n        dy = ((degreeLimit * 0.5 * yPercentage) / 100) * -1\n    }\n    // Down (Rotates neck down between 0 and degreeLimit)\n    if (y >= w.y / 2) {\n        ydiff = y - w.y / 2\n        yPercentage = (ydiff / (w.y / 2)) * 100\n        dy = (degreeLimit * yPercentage) / 100\n    }\n    return { x: dx, y: dy }\n}\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}